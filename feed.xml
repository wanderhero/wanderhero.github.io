<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wander&#39;s Blog</title>
  <subtitle>温故而知新</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="http://0613.me/"/>
  <updated>2017-05-14T17:14:59.000Z</updated>
  <id>http://0613.me/</id>
  
  <author>
    <name>Wander.Zeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 通过 JNI 调用 so/jnilib 动态链接库</title>
    <link href="http://0613.me/2017/05/14/20170514%20-%20Java-%E9%80%9A%E8%BF%87-JNI-%E8%B0%83%E7%94%A8-so-jnilib-%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/"/>
    <id>http://0613.me/2017/05/14/20170514 - Java-通过-JNI-调用-so-jnilib-动态链接库/</id>
    <published>2017-05-14T08:32:56.000Z</published>
    <updated>2017-05-14T17:14:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文用的是 <strong>JDK 1.7</strong> 版本，使用 <strong>Ubuntu 14.04.2 LTS</strong> 编译 so，<strong>macOS Sierra 10.12.4</strong> 编译 jnilib。<br>主要步骤就如下三步，具体代码见 <a href="https://github.com/wanderhero/test-normal-project" target="_blank" rel="external"><strong>https://github.com/wanderhero/test-normal-project.git</strong></a>：<br>&emsp;&emsp;1.加载实现了 native 函数的动态库；<br>&emsp;&emsp;2.声明 native 函数；<br>&emsp;&emsp;3.调用 native 函数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.wander.jni;</div><div class="line"></div><div class="line">public class JNITest &#123;</div><div class="line">	static &#123;</div><div class="line">		System.loadLibrary(<span class="string">"JNITest"</span>);// 加载实现了native函数的动态库</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static native String <span class="built_in">test</span>(String name);// 声明native函数</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		System.out.println(<span class="built_in">test</span>(<span class="string">"wander"</span>));// 调用 native 函数</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<hr>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;首先还是要先了解下什么是 JNI，才能知己知彼，百战不殆。<br>其实关键问题在于如何生成动态链接库，Java 方面倒不是大问题。<br>&emsp;&emsp;参考自 <a href="#参考1">xyang0917</a>，JNI 全称是 Java Native Interface (Java本地接口) 单词首字母的缩写，本地接口就是指用 C 和 C++ 开发的接口。由于 JNI 是 JVM 规范中的一部份，因此可以将我们写的JNI 程序在任何实现了 JNI 规范的 Java 虚拟机中运行。同时，这个特性使我们可以复用以前用 C/C++ 写的大量代码。<br>&emsp;&emsp;开发 JNI 程序会受到系统环境的限制，因为用 C/C++ 语言写出来的代码或模块，编译过程当中要依赖当前操作系统环境所提供的一些库函数，并和本地库链接在一起。而且编译后生成的二进制代码只能在本地操作系统环境下运行，因为不同的操作系统环境，有自己的本地库和 CPU 指令集，而且各个平台对标准 C/C++ 的规范和标准库函数实现方式也有所区别。这就造成使用了 JNI 接口的 JAVA 程序，不再像以前那样自由的跨平台。如果要实现跨平台，就必须将本地代码在不同的操作系统平台下编译出相应的动态库(<strong>windows：#.dll, linux/unix：lib#.so, mac os x：lib#.jnilib</strong>)。  </p>
<h3 id="生成-C-C-代码"><a href="#生成-C-C-代码" class="headerlink" title="生成 C/C++ 代码"></a>生成 C/C++ 代码</h3><p>&emsp;&emsp;如果已有 C/C++ 文件，可跳过此步。<br>&emsp;&emsp;最开始我们已经新建了一个 <strong>JNITest.java</strong> 源文件，那就基于此文件快速生成 .h 头文件。  </p>
<ul>
<li><strong>首先获取 .class 字节码文件，如果没有没有生成，可以通过javac 命令将 .java 源文件编译而成。</strong><br>注意是在工程根目录下，-d 表示将编译后的 class 文件放到指定的目录下，这里我把它放到和 src 同级的 bin 目录下。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192:<span class="built_in">test</span>-normal-project wander$ javac src/com/wander/jni/JNITest.java <span class="_">-d</span> ./bin</div></pre></td></tr></table></figure>
<ul>
<li><strong>然后就可以用 javah -jni 命令，根据 class 字节码文件生成 .h 头文件。</strong><br>默认生成的 .h 头文件名为 com_wander_jni_JNITest.h（包名+类名.h），我把它放在和 src 同级的 res/jni 目录下。    </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ javah -jni -classpath ./bin <span class="_">-d</span> ./res/jni com.wander.jni.JNITest</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;&emsp;也可以通过 -o 参数指定生成头文件名称，注意不能和 -d 混用，默认生成到同级目录下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ javah -jni -classpath ./bin -o JNITest.h com.wander.jni.JNITest</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;&emsp;参数说明，注意：-d和-o只能使用其中一个参数，具体查看 <strong>javah -help</strong>：<br>&emsp;&emsp;&emsp;&emsp;-classpath ：类搜索路径，这里表示从当前的 bin 目录下查找<br>&emsp;&emsp;&emsp;&emsp;-d ：将生成的头文件放到当前的 res/jni 目录下<br>&emsp;&emsp;&emsp;&emsp;-o ：指定生成的头文件名称  </p>
<p>&emsp;&emsp;&emsp;生成的 .h头文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/* DO NOT EDIT THIS FILE - it is machine generated */</div><div class="line"><span class="comment">#include &lt;jni.h&gt;</span></div><div class="line">/* Header <span class="keyword">for</span> class com_wander_jni_JNITest */</div><div class="line"></div><div class="line"><span class="comment">#ifndef _Included_com_wander_jni_JNITest</span></div><div class="line"><span class="comment">#define _Included_com_wander_jni_JNITest</span></div><div class="line"><span class="comment">#ifdef __cplusplus</span></div><div class="line">extern <span class="string">"C"</span> &#123;</div><div class="line"><span class="comment">#endif</span></div><div class="line">/*</div><div class="line"> * Class:     com_wander_jni_JNITest</div><div class="line"> * Method:    <span class="built_in">test</span></div><div class="line"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</div><div class="line"> */</div><div class="line">JNIEXPORT jstring JNICALL Java_com_wander_jni_JNITest_test</div><div class="line">  (JNIEnv *, jclass, jstring);</div><div class="line"></div><div class="line"><span class="comment">#ifdef __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#endif</span></div><div class="line"><span class="comment">#endif</span></div></pre></td></tr></table></figure></p>
<ul>
<li><strong>最后根据 .h头文件生成 .c 文件</strong><br>此处我在 c 里面打印 <strong>Hello ${name}</strong>，同时返回 <strong>return ${name}</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">// com_wander_jni_JNITest.c  </div><div class="line">  </div><div class="line"><span class="comment">#include "com_wander_jni_JNITest.h"  </span></div><div class="line">  </div><div class="line"><span class="comment">#ifdef __cplusplus  </span></div><div class="line">extern <span class="string">"C"</span>  </div><div class="line">&#123;  </div><div class="line"><span class="comment">#endif   </span></div><div class="line">/*</div><div class="line"> * Class:     com_wander_jni_JNITest</div><div class="line"> * Method:    <span class="built_in">test</span></div><div class="line"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</div><div class="line"> */</div><div class="line">JNIEXPORT jstring JNICALL Java_com_wander_jni_JNITest_test(  </div><div class="line">        JNIEnv *env, jclass cls, jstring j_str) </div><div class="line">&#123;  </div><div class="line">    const char *c_str = NULL;  </div><div class="line">    char buff[128] = &#123; 0 &#125;;  </div><div class="line">    c_str = (*env)-&gt;GetStringUTFChars(env, j_str, NULL);  </div><div class="line">    <span class="keyword">if</span> (c_str == NULL)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"out of memory.\n"</span>);  </div><div class="line">        <span class="built_in">return</span> NULL;  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello %s in c\n"</span>, c_str);  </div><div class="line">    sprintf(buff, <span class="string">"return %s"</span>, c_str);  </div><div class="line">    (*env)-&gt;ReleaseStringUTFChars(env, j_str, c_str);  </div><div class="line">    <span class="built_in">return</span> (*env)-&gt;NewStringUTF(env, buff);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">#ifdef __cplusplus  </span></div><div class="line">&#125;  </div><div class="line"><span class="comment">#endif</span></div></pre></td></tr></table></figure>
<h3 id="将-C-C-代码编译成动态库文件"><a href="#将-C-C-代码编译成动态库文件" class="headerlink" title="将 C/C++ 代码编译成动态库文件"></a>将 C/C++ 代码编译成动态库文件</h3><p>&emsp;&emsp;最近爆发了 比特币勒索病毒，三个操作系统的优劣好差估计又有谈资了。</p>
<ul>
<li><strong>Linux/Unix</strong><br>参数说明：<br>&emsp;-I：包含编译JNI必要的头文件<br>&emsp;-fPIC：编译成与位置无关的独立代码<br>&emsp;-shared：编译成动态库<br>&emsp;-o：指定编译后动态库生成的路径和文件名<br>本文用的是 阿里云的Ubuntu 14.04.2 LTS，把 .h 和 .c 文件放到同一目录下，通过 gcc 命令一步生成 libJNITest.so。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gcc -I<span class="variable">$JAVA_HOME</span>/include -I<span class="variable">$JAVA_HOME</span>/include/linux <span class="_">-f</span>PIC -shared com_wander_jni_JNITest.c -o libJNITest.so</div></pre></td></tr></table></figure>
<ul>
<li><strong>Mac OS X</strong><br>参数说明：<br>&emsp;-dynamiclib：表示编译成动态链接库<br>&emsp;-o：指定动态链接库编译后生成的路径及文件名<br>&emsp;-framework JavaVM -I：编译JNI需要用到JVM的头文件(jni.h)，第一个目录是平台无关的，第二个目录是与操作系统平台相关的头文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gcc -dynamiclib -o libJNITest.jnilib com_wander_jni_JNITest.c -framework JavaVM -I/<span class="variable">$JAVA_HOME</span>/include -I/<span class="variable">$JAVA_HOME</span>/include/darwin</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;&emsp;看上去也很简单，但是在我的电脑上却报错了，提示 <strong>‘jni.h’ file not found(找不到 jni 头文件)</strong>，感谢 <a href="#参考2">Stack Overflow</a>，找到了貌似正确的命令，却提示 <strong>Operation not permitted(不允许操作)</strong>，连加了 sudo 都不行，难道我的人品差到连系统都不忍直视了吗？事实证明，人品是挺差的，但功夫不负有心人，感谢 <a href="#参考3">小胡子</a>，原来 Apple 在 OS X 10.11 以后的版本中默认启动了一项系统保护程序，叫做 System Integrity Protection，也被唤作 rootless（寓意让 root 弱一点），该程序意在保护电脑不被恶意程序攻击，感觉屌屌的，以安全的名义，一切都是可以接受的。<br>&emsp;&emsp;&emsp;SIP 会锁定几个系统文件目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/System</div><div class="line">/sbin</div><div class="line">/usr （/usr/<span class="built_in">local</span> 除外）</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;&emsp;在 SIP 的保护下，部分软件、功能、脚本都会失效，还好 mac 提供了命令，我们可以通过 csrutil 来检测系统当前 SIP 的启动状态、打开或关闭此功能。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ csrutil status</div><div class="line">System Integrity Protection status: enabled.</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;&emsp;enabled 说明当前我的系统是在 SIP 保护下的，我们可以通过如下步骤关闭 SIP，以防万一，可以先做个 Time Machine 备份：<br>&emsp;&emsp;&emsp;&emsp;- 重启电脑，按下 Command + R 直到听到开机声音，此时电脑会进入恢复模式（Recovery Mode）<br>&emsp;&emsp;&emsp;&emsp;- 当 macOS 实用工具出现在屏幕中时，选择 实用工具(Utilities) 菜单，选择 终端(Terminal)<br>&emsp;&emsp;&emsp;&emsp;- 输入 csrutil disable，回车<br>&emsp;&emsp;&emsp;&emsp;- 电脑重启后，SIP 就关闭了<br>&emsp;&emsp;&emsp;恢复 SIP 的方式同上，只不过终端中输入 csrutil enable 即可。</p>
<p><div style="float: left"><a href="http://wander.u.qiniudn.com/20170514-1632-0.0.jpg?imageslim" target="_blank" rel="external"><img src="http://wander.u.qiniudn.com/20170514-1632-0.0.jpg?imageView2/2/h/140/imageslim" alt=""></a></div><a href="http://wander.u.qiniudn.com/20170514-1632-0.1.jpg?imageslim" target="_blank" rel="external"><img src="http://wander.u.qiniudn.com/20170514-1632-0.1.jpg?imageView2/2/h/140/imageslim" alt=""></a>    </p>
<p>&emsp;&emsp;&emsp;关闭了 SIP 后，再来试试之前的 jni 头文件找不到的问题，果然 OK，这里我采用的是 jdk1.7 版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /System/Library/Frameworks/JavaVM.framework/Versions</div><div class="line">$ sudo ln -nsf /Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents ./CurrentJDK</div><div class="line"></div><div class="line">$ <span class="built_in">cd</span> /System/Library/Frameworks/JavaVM.framework</div><div class="line">$ sudo ln -nsf Versions/CurrentJDK/Home/include/ ./Headers</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;&emsp;问题扫除后，再执行 gcc 命令，libJNITest.jnilib 顺利生成~</p>
<ul>
<li><strong>Windows</strong><br>由于手上没有 Windows 电脑，Windows 的验证暂缺。</li>
</ul>
<h3 id="运行-Java-程序"><a href="#运行-Java-程序" class="headerlink" title="运行 Java 程序"></a>运行 Java 程序</h3><p>&emsp;&emsp;经过了漫长的准备，动态链接库 终于到手，接下来就差最后一把火了。此时如果心急直接运行，程序会毫不留情地抛给你一个 java.lang.UnsatisfiedLinkError 异常，且无法 try catch。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.UnsatisfiedLinkError: no JNITest1 <span class="keyword">in</span> java.library.path</div><div class="line">	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1886)</div><div class="line">	at java.lang.Runtime.loadLibrary0(Runtime.java:849)</div><div class="line">	at java.lang.System.loadLibrary(System.java:1088)</div><div class="line">	at com.wander.jni.JNITest.&lt;clinit&gt;(JNITest.java:5)</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;一般在类的静态 (static) 代码块中加载动态库最合适，因为在创建类的实例时，类会被 ClassLoader 先加载到虚拟机，随后立马调用类的 static 静态代码块。这时再去调用 native 方法就万无一失了。加载动态库的两种方式：<br>&emsp;&emsp;方法1简单粗暴，指定要调用的动态链接库的绝对路径即可，只是在跨平台访问时，需要指定对应平台的文件路径，且不同平台文件的前缀和后缀都不一样；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.load(<span class="string">"/Users/wander/MyDocuments/workspace/workspace4eclipse/test-normal-project/res/jni/libJNITest.jnilib"</span>);</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;方法2只需要指定动态库的名字即可，不需要前缀后缀，java 会去 java.library.path 系统属性指定的目录下查找动态库文件，一劳永逸；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.loadLibrary(<span class="string">"JNITest"</span>);</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这里我写了一个简单类去查看 java.library.path 路径，和环境变量一样，每个路径用:分割，随便放到哪个路径下都有效。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">package com.wander.jni;</div><div class="line"></div><div class="line">public class JavaLibraryPath &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		System.out.println(System.getProperty(<span class="string">"java.library.path"</span>));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;做成可执行 Jar 文件，就可以在多平台上运行查看了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ java -jar JavaLibraryPath.jar</div><div class="line">/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;如此这般，就可以再做个可执行 Jar 文件，在 linux/unix 平台上访问了，mac 系统更是可以在 IDE 里面运行调试了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ java -jar JNITest.jar </div><div class="line">Hello wander <span class="keyword">in</span> c</div><div class="line"><span class="built_in">return</span> wander</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&emsp;&emsp;不会 C/C++ 的 Java 程序员也可以用好 JNI~</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><span id="参考1"><a href="http://blog.csdn.net/xyang81/article/details/41777471" target="_blank" rel="external">JNI/NDK开发指南（一）—— JNI开发流程及HelloWorld</a></span>  </li>
<li><span id="参考2"><a href="http://stackoverflow.com/questions/9704376/how-to-install-java-native-development-headers-on-os-x-lion" target="_blank" rel="external">Stack Overflow - How to install Java native development headers on OS X Lion</a></span> </li>
<li><span id="参考3"><a href="http://www.barretlee.com/blog/2016/04/06/operation-not-permitted-problem-in-linux-or-unix-system/" target="_blank" rel="external">小胡子哥的个人博客 - Unix/Linux 系统中的 Operation Not Permitted 问题</a></span> </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本文用的是 &lt;strong&gt;JDK 1.7&lt;/strong&gt; 版本，使用 &lt;strong&gt;Ubuntu 14.04.2 LTS&lt;/strong&gt; 编译 so，&lt;strong&gt;macOS Sierra 10.12.4&lt;/strong&gt; 编译 jnilib。&lt;br&gt;主要步骤就如下三步，具体代码见 &lt;a href=&quot;https://github.com/wanderhero/test-normal-project&quot;&gt;&lt;strong&gt;https://github.com/wanderhero/test-normal-project.git&lt;/strong&gt;&lt;/a&gt;：&lt;br&gt;&amp;emsp;&amp;emsp;1.加载实现了 native 函数的动态库；&lt;br&gt;&amp;emsp;&amp;emsp;2.声明 native 函数；&lt;br&gt;&amp;emsp;&amp;emsp;3.调用 native 函数。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;package com.wander.jni;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class JNITest &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	static &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.loadLibrary(&lt;span class=&quot;string&quot;&gt;&quot;JNITest&quot;&lt;/span&gt;);// 加载实现了native函数的动态库&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	public static native String &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;(String name);// 声明native函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	public static void main(String[] args) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;wander&quot;&lt;/span&gt;));// 调用 native 函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://0613.me/categories/Java/"/>
    
      <category term="JNI" scheme="http://0613.me/categories/Java/JNI/"/>
    
    
      <category term="Java" scheme="http://0613.me/tags/Java/"/>
    
      <category term="JNI" scheme="http://0613.me/tags/JNI/"/>
    
      <category term="so" scheme="http://0613.me/tags/so/"/>
    
      <category term="jnilib" scheme="http://0613.me/tags/jnilib/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA For Mac 导入导出快捷键配置</title>
    <link href="http://0613.me/2017/05/05/20170505%20-%20IntelliJ-IDEA-For-Mac-%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%BF%AB%E6%8D%B7%E9%94%AE%E9%85%8D%E7%BD%AE/"/>
    <id>http://0613.me/2017/05/05/20170505 - IntelliJ-IDEA-For-Mac-导入导出快捷键配置/</id>
    <published>2017-05-05T06:03:18.000Z</published>
    <updated>2017-05-14T08:48:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文用的是 <code>IntelliJ IDEA 2017.1.1</code> 版本。</p>
<ul>
<li><p><span id="参考0">点击顶部的 <strong>File</strong>，选择 <strong>Export Settings…</strong>；</span><br><a href="http://wander.u.qiniudn.com/20170505-1403-0.0.png?imageslim" target="_blank" rel="external"><img src="http://wander.u.qiniudn.com/20170505-1403-0.0.png?imageView2/2/h/100/imageslim" alt=""></a></p>
</li>
<li><p>默认选择的应该就是 <strong>当前 IntelliJ IDEA 版本所在的配置路径</strong>；<br><a href="http://wander.u.qiniudn.com/20170505-1403-1.0.png?imageslim" target="_blank" rel="external"><img src="http://wander.u.qiniudn.com/20170505-1403-1.0.png?imageView2/2/h/100/imageslim" alt=""></a><br>[不对看这里]如果不是，就选择 <strong>…</strong> 即更多文件，选择 <strong>Recent Flaces</strong> 即最近使用，选择你所使用的 IntelliJIdea 版本；<br><a href="http://wander.u.qiniudn.com/20170505-1403-1.1.png?imageslim" target="_blank" rel="external"><img src="http://wander.u.qiniudn.com/20170505-1403-1.1.png?imageView2/2/h/100/imageslim" alt=""></a></p>
</li>
<li><p>点击 <strong>OK</strong>，如果是第一次 Export，会提示 <strong>Export Complete</strong>，此时不要急着 <strong>Cancel</strong>，而是选择 <strong>Reveal in Finder</strong>；<br><a href="http://wander.u.qiniudn.com/20170505-1403-2.1.png?imageslim" target="_blank" rel="external"><img src="http://wander.u.qiniudn.com/20170505-1403-2.1.png?imageView2/2/h/100/imageslim" alt=""></a><br>[不对看这里]如果不是第一次，则会提示 <strong>File Already Exists</strong>，其实就是该文件已存在，无脑点击 <strong>OK</strong> 即可，后面就是老司机上路了；<br><a href="http://wander.u.qiniudn.com/20170505-1403-2.0.png?imageslim" target="_blank" rel="external"><img src="http://wander.u.qiniudn.com/20170505-1403-2.0.png?imageView2/2/h/100/imageslim" alt=""></a></p>
</li>
<li><p>在打开的文件里找到 <strong>keymaps</strong> 目录，你想要的 <strong>快捷键配置</strong> 文件就静静地躺在那里，特别提醒，<strong>对里面的文件删除或添加，都需要重启 IDEA 才能生效，</strong>enjoy it 吧~<br><a href="http://wander.u.qiniudn.com/20170505-1403-3.png?imageslim" target="_blank" rel="external"><img src="http://wander.u.qiniudn.com/20170505-1403-3.png?imageView2/2/h/100/imageslim" alt=""></a></p>
<a id="more"></a>
</li>
</ul>
<hr>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;虽然用的最习惯的还是 eclipse，尤其是 MyEclipse，但由于 JetBrains 成功的商业模式，把各个工具的操作都统一了，大势所趋，IntelliJ IDEA 成了新宠。我还不是很熟悉这个新伙伴，今天遇到要把快捷键设置导出的问题就一下子难到了。本以为谷歌在手，天下我有，结果搜了一通，要么是 Windows 版的，要么就是风马牛不相及的快捷键使用说明，竟然没有我大 Mac 的文章，那就让我来献个丑吧~</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>&emsp;&emsp;前面提到，我已经找到了 <a href="http://blog.csdn.net/jiangfuqiang/article/details/38553011" target="_blank" rel="external">Windows</a> 的方法（<a href="#参考1">见参考</a>），那举一反三，Mac 上的位置呼之欲出。<br>&emsp;&emsp;Windows 下 IDEA 默认快捷键的配置文件所在地（目录前缀自己改）：C:\Program Files (x86)\JetBrains\IntelliJ IDEA xxx\lib\resources.jar\idea\KeyMap_xxx.xml，很显然，Mac 下肯定在 <strong>IntelliJ IDEA.app</strong> 的 <strong>包内容</strong> 里，<a href="http://wander.u.qiniudn.com/20170505-1403-4.0.png?imageslim" target="_blank" rel="external"><img src="http://wander.u.qiniudn.com/20170505-1403-4.0.png?imageView2/2/h/100/imageslim" alt=""></a><strong>resources.jar</strong> 包是顺利找到了，<a href="http://wander.u.qiniudn.com/20170505-1403-4.1.png?imageslim" target="_blank" rel="external"><img src="http://wander.u.qiniudn.com/20170505-1403-4.1.png?imageView2/2/h/100/imageslim" alt=""></a> 但通过 <strong>JD-GUI</strong> 查看了下，可能是版本的问题， <strong>idea</strong> 目录下并没有和 <strong>KeyMap</strong> 有关的文件，而是在同级的 <strong>keymaps</strong> 目录下，和 <strong>偏好设置</strong> 里的 <strong>Keymap</strong> 的设置可以对应起来，说明 默认快捷键的配置 找对了。<br><a href="http://wander.u.qiniudn.com/20170505-1403-4.2.png?imageslim" target="_blank" rel="external"><img src="http://wander.u.qiniudn.com/20170505-1403-4.2.png?imageView2/2/h/100/imageslim" alt=""></a><a href="http://wander.u.qiniudn.com/20170505-1403-4.3.png?imageslim" target="_blank" rel="external"><img src="http://wander.u.qiniudn.com/20170505-1403-4.3.png?imageView2/2/h/100/imageslim" alt=""></a><br>&emsp;&emsp;看了半天，我自定义的快捷键在哪里，这才是重点。Windows 下 IDEA 用户自定义快捷键的配置文件所在地（目录前缀自己改）：C:\Users\Administrator.IntelliJIdea13\config\keymaps*.xml，但 Mac 下的配置放在哪呢，这就比较尴尬了，只能退而求其次，先找下 IntelliJ IDEA For Mac 的配置文件保存路径吧，这就很多了，感谢<a href="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/installation-directory-introduce.html" target="_blank" rel="external">万能的 Google，无私的网友</a>（<a href="#参考2">见参考</a>），/Users/你的用户名/Library/Preferences/IntelliJIdeaXXXXXX，用于保存你的个人配置，等价于 Windows 下的 config 目录，接下来，不管用 <strong>终端</strong> 还是 <strong>前往文件夹…</strong> 都可以，你喜欢就好。<br><a href="http://wander.u.qiniudn.com/20170505-1403-5.0.png?imageslim" target="_blank" rel="external"><img src="http://wander.u.qiniudn.com/20170505-1403-5.0.png?imageView2/2/h/100/imageslim" alt=""></a><a href="http://wander.u.qiniudn.com/20170505-1403-5.1.png?imageslim" target="_blank" rel="external"><img src="http://wander.u.qiniudn.com/20170505-1403-5.1.png?imageView2/2/h/100/imageslim" alt=""></a><br>&emsp;&emsp;最后，感谢好友 <strong>Stephen</strong> 抛来的问题，又自己找到了<a href="#参考0">最上面所说的最正常最方便的正解</a>，还分享了丰富的<a href="http://color-themes.com/?view=index" target="_blank" rel="external">颜色主题 Color Themes</a>（<a href="#参考3">见参考</a>），下载喜欢的主题，其实就是 jar 包，通过 <strong>Import Settings…</strong> 导入即可，如果想极客一点，可以把 jar 包解包，把文件放到对应的目录下即可。</p>
<h3 id="题外话：保存快捷键配置"><a href="#题外话：保存快捷键配置" class="headerlink" title="题外话：保存快捷键配置"></a>题外话：保存快捷键配置</h3><p>&emsp;&emsp;喜欢的快捷键要好好珍惜，我选择 GitHub 来装逼，<a href="https://github.com/wanderhero/config/blob/master/IntelliJ%20IDEA/keymaps/custom%20Mac%20OS%20X%2010_5_.xml" target="_blank" rel="external"><strong>https://github.com/wanderhero/config.git</strong></a>，其实我就把 <strong>代码补全(Main menu –&gt; Code –&gt; Completion)</strong> 的快捷键改成了 <strong>Alt + 斜杠(⌥/)</strong>，符合国情~</p>
<h3 id="吐槽一下"><a href="#吐槽一下" class="headerlink" title="吐槽一下"></a>吐槽一下</h3><p>&emsp;&emsp;IntelliJ IDEA 要是能在 快捷键配置 界面添加 导入 和 导出 按钮多方便，既然没有，就 PS 下 YY 下吧~<br><a href="http://wander.u.qiniudn.com/20170505-1403-6.1.png?imageslim" target="_blank" rel="external"><img src="http://wander.u.qiniudn.com/20170505-1403-6.1.png?imageView2/2/h/100/imageslim" alt=""></a><br>&emsp;&emsp;对比了下 Eclipse，其实 Eclipse 提供了导出快捷键设置的按钮，可以将当前 Eclipse 中所有快捷键设置导出到一个 csv 格式的文件中，却没有导入按钮。为什么以前用 Eclipse 没注意到这点，到了 IntelliJ IDEA 却需要呢，归根结底还是 IntelliJ IDEA 的快捷键需要换的缘故，虽然这东西是舶来品，但既然无法改变别人，那只能改变自己了~</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><span id="参考1"><a href="http://blog.csdn.net/jiangfuqiang/article/details/38553011" target="_blank" rel="external">jiangfuqiang的专栏 - 完整导出IntelliJ IDEA的快捷键</a>，其他几篇跟博主一模一样的文章应该都是 copy 的</span>  </li>
<li><span id="参考2"><a href="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/installation-directory-introduce.html" target="_blank" rel="external">极客学院的IntelliJ IDEA 相关核心文件和目录介绍之Mac 的配置文件保存路径</a></span>  </li>
<li><span id="参考3"><a href="http://color-themes.com/?view=index" target="_blank" rel="external">Color Themes - 多彩主题</a></span>  </li>
</ul>
<div class="note danger"><p><strong>版权声明：</strong> 本文章转载请注明出处！ </p>
</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;本文用的是 &lt;code&gt;IntelliJ IDEA 2017.1.1&lt;/code&gt; 版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span id=&quot;参考0&quot;&gt;点击顶部的 &lt;strong&gt;File&lt;/strong&gt;，选择 &lt;strong&gt;Export Settings…&lt;/strong&gt;；&lt;/span&gt;&lt;br&gt;&lt;a href=&quot;http://wander.u.qiniudn.com/20170505-1403-0.0.png?imageslim&quot;&gt;&lt;img src=&quot;http://wander.u.qiniudn.com/20170505-1403-0.0.png?imageView2/2/h/100/imageslim&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;默认选择的应该就是 &lt;strong&gt;当前 IntelliJ IDEA 版本所在的配置路径&lt;/strong&gt;；&lt;br&gt;&lt;a href=&quot;http://wander.u.qiniudn.com/20170505-1403-1.0.png?imageslim&quot;&gt;&lt;img src=&quot;http://wander.u.qiniudn.com/20170505-1403-1.0.png?imageView2/2/h/100/imageslim&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;[不对看这里]如果不是，就选择 &lt;strong&gt;…&lt;/strong&gt; 即更多文件，选择 &lt;strong&gt;Recent Flaces&lt;/strong&gt; 即最近使用，选择你所使用的 IntelliJIdea 版本；&lt;br&gt;&lt;a href=&quot;http://wander.u.qiniudn.com/20170505-1403-1.1.png?imageslim&quot;&gt;&lt;img src=&quot;http://wander.u.qiniudn.com/20170505-1403-1.1.png?imageView2/2/h/100/imageslim&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击 &lt;strong&gt;OK&lt;/strong&gt;，如果是第一次 Export，会提示 &lt;strong&gt;Export Complete&lt;/strong&gt;，此时不要急着 &lt;strong&gt;Cancel&lt;/strong&gt;，而是选择 &lt;strong&gt;Reveal in Finder&lt;/strong&gt;；&lt;br&gt;&lt;a href=&quot;http://wander.u.qiniudn.com/20170505-1403-2.1.png?imageslim&quot;&gt;&lt;img src=&quot;http://wander.u.qiniudn.com/20170505-1403-2.1.png?imageView2/2/h/100/imageslim&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;[不对看这里]如果不是第一次，则会提示 &lt;strong&gt;File Already Exists&lt;/strong&gt;，其实就是该文件已存在，无脑点击 &lt;strong&gt;OK&lt;/strong&gt; 即可，后面就是老司机上路了；&lt;br&gt;&lt;a href=&quot;http://wander.u.qiniudn.com/20170505-1403-2.0.png?imageslim&quot;&gt;&lt;img src=&quot;http://wander.u.qiniudn.com/20170505-1403-2.0.png?imageView2/2/h/100/imageslim&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在打开的文件里找到 &lt;strong&gt;keymaps&lt;/strong&gt; 目录，你想要的 &lt;strong&gt;快捷键配置&lt;/strong&gt; 文件就静静地躺在那里，特别提醒，&lt;strong&gt;对里面的文件删除或添加，都需要重启 IDEA 才能生效，&lt;/strong&gt;enjoy it 吧~&lt;br&gt;&lt;a href=&quot;http://wander.u.qiniudn.com/20170505-1403-3.png?imageslim&quot;&gt;&lt;img src=&quot;http://wander.u.qiniudn.com/20170505-1403-3.png?imageView2/2/h/100/imageslim&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IDE" scheme="http://0613.me/categories/IDE/"/>
    
      <category term="IntelliJ IDEA" scheme="http://0613.me/categories/IDE/IntelliJ-IDEA/"/>
    
    
      <category term="IDE" scheme="http://0613.me/tags/IDE/"/>
    
      <category term="IntelliJ IDEA" scheme="http://0613.me/tags/IntelliJ-IDEA/"/>
    
      <category term="快捷键" scheme="http://0613.me/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
      <category term="配置" scheme="http://0613.me/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hello World - Hexo</title>
    <link href="http://0613.me/2017/04/30/20170430%20-%20hello-world-hexo/"/>
    <id>http://0613.me/2017/04/30/20170430 - hello-world-hexo/</id>
    <published>2017-04-30T13:39:38.000Z</published>
    <updated>2017-04-30T13:47:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="博客" scheme="http://0613.me/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="搭建" scheme="http://0613.me/categories/%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA/"/>
    
      <category term="Hexo" scheme="http://0613.me/categories/%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA/Hexo/"/>
    
    
      <category term="博客" scheme="http://0613.me/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="blog" scheme="http://0613.me/tags/blog/"/>
    
      <category term="Hello World" scheme="http://0613.me/tags/Hello-World/"/>
    
      <category term="hexo" scheme="http://0613.me/tags/hexo/"/>
    
      <category term="命令行" scheme="http://0613.me/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建之Hexo系列</title>
    <link href="http://0613.me/2017/04/30/20170430%20-%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B9%8B%20Hexo%20%E7%B3%BB%E5%88%97/"/>
    <id>http://0613.me/2017/04/30/20170430 - 博客搭建之 Hexo 系列/</id>
    <published>2017-04-30T13:38:38.000Z</published>
    <updated>2017-05-05T09:43:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;其实每一项网上多找找都可以找到相应的文章，我也是借鉴了各种前人的总结才搭建出来的，但是把自己的结果整理出来比参考他人更花时间和精力。在学习中也发现了一些过时或不正确的内容，这里只记录真正实现过的功能，这也算是本博客的特色，给看的人负责，也是对自己的回顾。<br><a id="more"></a><br>已完成  </p>
<p>未完成</p>
<ul>
<li>选择 Hexo 搭建个人博客 </li>
<li>安装 Hexo 前准备 Node.js  </li>
<li>安装 Hexo 前准备 Git  </li>
<li>Hexo 初体验 </li>
<li>Hexo 主题</li>
<li>绑定域名  </li>
<li>备案</li>
<li>网站收录    </li>
<li>公益404   </li>
<li>站内搜索  </li>
<li>评论系统  </li>
<li>访问统计  </li>
<li>分享功能 </li>
<li>RSS     </li>
<li>捐赠  </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;其实每一项网上多找找都可以找到相应的文章，我也是借鉴了各种前人的总结才搭建出来的，但是把自己的结果整理出来比参考他人更花时间和精力。在学习中也发现了一些过时或不正确的内容，这里只记录真正实现过的功能，这也算是本博客的特色，给看的人负责，也是对自己的回顾。&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="http://0613.me/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="搭建" scheme="http://0613.me/categories/%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA/"/>
    
      <category term="Hexo" scheme="http://0613.me/categories/%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA/Hexo/"/>
    
    
      <category term="博客" scheme="http://0613.me/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="blog" scheme="http://0613.me/tags/blog/"/>
    
      <category term="hexo" scheme="http://0613.me/tags/hexo/"/>
    
      <category term="搭建" scheme="http://0613.me/tags/%E6%90%AD%E5%BB%BA/"/>
    
      <category term="系列" scheme="http://0613.me/tags/%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>序言</title>
    <link href="http://0613.me/2017/04/14/20170414%20-%20%E5%BA%8F%E8%A8%80/"/>
    <id>http://0613.me/2017/04/14/20170414 - 序言/</id>
    <published>2017-04-13T16:00:00.000Z</published>
    <updated>2017-05-05T06:32:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;开始入博客的坑，比想象中的难多了，光博客的搭建就可以写个系列了，至于能坚持多久，就让时间来验证吧，回顾过去，做好当前，展望未来足以。<br>&emsp;&emsp;这是一个信息爆炸的时代，也充斥着各种混淆视听的内容，我想把最关键的东西写在最前面，让看到文章的读者能够快速辨别这篇文章对他有没有用，至于后面的散文诗，算是一个历史的积累吧。<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;开始入博客的坑，比想象中的难多了，光博客的搭建就可以写个系列了，至于能坚持多久，就让时间来验证吧，回顾过去，做好当前，展望未来足以。&lt;br&gt;&amp;emsp;&amp;emsp;这是一个信息爆炸的时代，也充斥着各种混淆视听的内容，我想把最关键的东西写在最前面，让看到文章的读者能够快速辨别这篇文章对他有没有用，至于后面的散文诗，算是一个历史的积累吧。&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://0613.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://0613.me/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
